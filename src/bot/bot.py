import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.config.config import config
from src.services.llm_service import LLMService
from src.services.wildberries_service import WildberriesService
from src.services.proxy_service import PiaProxyService


# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize services
proxy_service = PiaProxyService()
llm_service = LLMService(proxy_service)
wb_service = WildberriesService(proxy_service)


# Initialize bot and dispatcher
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """Start command handler"""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤ Wildberries.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã "
        "–∏ –Ω–∞–π–¥—É –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: https://www.wildberries.ru/catalog/182803851/detail.aspx"
    )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """Help command handler"""
    position_limit = config.MAX_POSITION_LIMIT
    await message.answer(
        "üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "   https://www.wildberries.ru/catalog/XXXXXXXXX/detail.aspx\n\n"
        "2. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä –∏ –æ–ø—Ä–µ–¥–µ–ª—é –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n\n"
        "3. –ó–∞—Ç–µ–º —è –Ω–∞–π–¥—É –ø–æ–∑–∏—Ü–∏–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É\n\n"
        f"4. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–ø-{position_limit} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —è —Å–æ–æ–±—â—É –æ–± —ç—Ç–æ–º\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )


async def process_wildberries_url(message: types.Message, url: str):
    """Process Wildberries product URL"""
    user_id = message.from_user.id
    
    # Send "typing" action
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    # Extract article ID
    article_id = wb_service.extract_article_id(url)
    if not article_id:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # Send initial response
    processing_message = await message.answer(f"‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä {article_id}...")
    
    try:
        # Get product data
        product_data = await wb_service.get_product_data(url, user_id)
        if not product_data:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
            return
        
        # Update processing message
        await bot.edit_message_text(
            "üîç –û–ø—Ä–µ–¥–µ–ª—è—é –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞...", 
            chat_id=message.chat.id, 
            message_id=processing_message.message_id
        )
        
        # Extract keywords using LLM
        keywords = await llm_service.extract_keywords(product_data, user_id)
        
        # Update processing message
        await bot.edit_message_text(
            f"üîé –ò—â—É –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ {len(keywords)} –∑–∞–ø—Ä–æ—Å–∞–º...", 
            chat_id=message.chat.id, 
            message_id=processing_message.message_id
        )
        
        # Analyze product by keywords
        if "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤" in keywords or "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤" in keywords:
            analysis = None
        else:
            analysis = await wb_service.analyze_product_keywords(url, keywords, user_id)
        
        # Delete processing message
        await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
        
        position_limit = config.MAX_POSITION_LIMIT
        
        if analysis:
            product = analysis.product
            caption = (
                    f"üè∑Ô∏è *{product.name}*\n"
                    f"üè¢ –ë—Ä–µ–Ω–¥: *{product.brand}*\n"
                    f"üí∞ –¶–µ–Ω–∞: *{product.price:.0f} ‚ÇΩ*\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: *{product.rating}*\n"
                    f"üí¨ –û—Ç–∑—ã–≤—ã: *{product.feedbacks}*\n"
                    f"üÜî ID: [{product.id}]({product.url})\n\n"
                    f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:*"
                )
            # Send product image and details
            try:
                await message.answer_photo(
                    photo=product.image_url,
                    caption=caption,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logging.error(f"Failed to send product image: {e}")
                # Fallback without image
                await message.answer(caption, parse_mode="Markdown")
            
            # Send keyword results
            result_text = "üîë *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–æ–∑–∏—Ü–∏–∏:*\n\n"
            for i, result in enumerate(analysis.search_results, 1):
                position = result.product_position if result.product_position else f"–Ω–∏–∂–µ {position_limit}"
                result_text += f"{i}. *{result.keyword}* ‚Äî –ø–æ–∑–∏—Ü–∏—è: *{position}*\n"
        else:
            result_text = "ü§ñ *–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*\n\n"
        await message.answer(result_text, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"Error processing Wildberries URL: {e}")
        # Delete processing message if exists
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
        except:
            pass
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–∞: {str(e)}")


@dp.message()
async def handle_message(message: types.Message):
    if "wildberries.ru/catalog" in message.text:
        await process_wildberries_url(message, message.text)
    else:
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "https://www.wildberries.ru/catalog/XXXXXXXXX/detail.aspx"
        )


async def main():
    """Main function to start the bot"""
    # Skip pending updates
    await bot.delete_webhook(drop_pending_updates=True)
    # Start polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    # Run the bot
    asyncio.run(main())
